// <auto-generated />
using System;
using Inventory.Transactions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Inventory.Transactions.Data.Migrations
{
    [DbContext(typeof(TransactionsDbContext))]
    [Migration("20240826172030_PG4")]
    partial class PG4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Transactions")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Transactions.Entities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entity", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("Field", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Template", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transaction", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Value", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("FieldId");

                    b.HasIndex("TransactionId");

                    b.ToTable("Value", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Field", b =>
                {
                    b.HasOne("Inventory.Transactions.Entities.Template", null)
                        .WithMany("Fields")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Value", b =>
                {
                    b.HasOne("Inventory.Transactions.Entities.Entity", "Entity")
                        .WithMany("Values")
                        .HasForeignKey("EntityId");

                    b.HasOne("Inventory.Transactions.Entities.Field", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Inventory.Transactions.Entities.Transaction", "Transaction")
                        .WithMany("Values")
                        .HasForeignKey("TransactionId");

                    b.Navigation("Entity");

                    b.Navigation("Field");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Entity", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Field", b =>
                {
                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Template", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Transaction", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
