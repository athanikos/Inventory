// <auto-generated />
using System;
using Inventory.Transactions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Inventory.Transactions.Data.Migrations
{
    [DbContext(typeof(TransactionsDbContext))]
    [Migration("20240826084953_PG")]
    partial class PG
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Transactions")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Inventory.Transactions.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transactions", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionItems", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItemFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TransactionItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionItemTemplateFieldId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransactionItemId");

                    b.HasIndex("TransactionItemTemplateFieldId");

                    b.ToTable("Values", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItemTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TransactionItemTemplate", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItemTemplateField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TransactionItemTemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TransactionItemTemplateId");

                    b.ToTable("TransactionItemTemplateField", "Transactions");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItem", b =>
                {
                    b.HasOne("Inventory.Transactions.Entities.Transaction", null)
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItemFieldValue", b =>
                {
                    b.HasOne("Inventory.Transactions.Entities.TransactionItem", null)
                        .WithMany("FieldValues")
                        .HasForeignKey("TransactionItemId");

                    b.HasOne("Inventory.Transactions.Entities.TransactionItemTemplateField", "Field")
                        .WithMany("FieldValues")
                        .HasForeignKey("TransactionItemTemplateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItemTemplateField", b =>
                {
                    b.HasOne("Inventory.Transactions.Entities.TransactionItemTemplate", null)
                        .WithMany("TemplateFields")
                        .HasForeignKey("TransactionItemTemplateId");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.Transaction", b =>
                {
                    b.Navigation("TransactionItems");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItem", b =>
                {
                    b.Navigation("FieldValues");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItemTemplate", b =>
                {
                    b.Navigation("TemplateFields");
                });

            modelBuilder.Entity("Inventory.Transactions.Entities.TransactionItemTemplateField", b =>
                {
                    b.Navigation("FieldValues");
                });
#pragma warning restore 612, 618
        }
    }
}
